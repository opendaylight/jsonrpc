/*
 * Copyright (c) 2019 Lumina Networks, Inc. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
package org.opendaylight.jsonrpc.impl;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

import org.opendaylight.jsonrpc.model.JsonRpcTransactionFacade;
import org.opendaylight.yangtools.yang.common.OperationFailedException;

/**
 * Proxy that correctly propagates cause so that meaningful response can be generated by RESTConf.
 *
 * @author <a href="mailto:richard.kosegi@gmail.com">Richard Kosegi</a>
 * @since Jul 26, 2019
 */
public final class TransactionProxy implements InvocationHandler {
    private final JsonRpcTransactionFacade delegate;

    private TransactionProxy(JsonRpcTransactionFacade delegate) {
        this.delegate = delegate;
    }

    /**
     * Create new proxy instance using given delegate.
     *
     * @param delegate target instance to whom calls are intercepted
     * @return new proxy instance
     */
    public static JsonRpcTransactionFacade create(JsonRpcTransactionFacade delegate) {
        return (JsonRpcTransactionFacade) Proxy.newProxyInstance(JsonRpcTransactionFacade.class.getClassLoader(),
                new Class<?>[] { JsonRpcTransactionFacade.class }, new TransactionProxy(delegate));
    }

    @SuppressWarnings("checkstyle:IllegalCatch")
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        try {
            return method.invoke(delegate, args);
        } catch (Exception e) {
            throw new OperationFailedException("Operation '" + method.getName() + "' failed", e);
        }
    }
}